#!/usr/bin/env ruby
# This class was written to simplify the parsing of configuration
# files in the format of "param = value".
#
# For further information please refer to the './doc' directory
# as well as the CHANGELOG and README files included.
#
# Note: A group is a set of parameters defined for a subpart of a 
# config file
class ConfigParser
  
  attr_accessor :config_file, :params, :groups

  # Initialize the class with the path to the 'config_file'
  # The class objects are dynamically generated by the
  # name of the 'param' in the config file.  Therefore, if
  # the config file is 'param = value' then the itializer
  # will eval "@param = value"
  #
  def initialize(config_file=nil)
    @config_file = config_file
    @params = {}
    @groups = []
  end
  
  # Validate the config file, and contents
  def validate_config
    raise 'Invalid config file name.' unless @config_file
    raise Errno::ENOENT, "#{@config_file} does not exist" unless File.exist?(@config_file.path)
    raise Errno::EACCES, "#{@config_file} is not readable" unless File.readable?(@config_file.path)
    # FIX ME: need to validate contents/structure?
  end  
  
  # Import data from the config to our config object.
  def parse
    validate_config
    # The config is top down.. anything after a [group] gets added as part
    # of that group until a new [group] is found.  
    group = nil
    self.config_file.each do |line| 
      line.strip!
      unless (/^\#/.match(line))
        if(/\s*=\s*/.match(line))
          param, value = line.split(/\s*=\s*/, 2)  
          var_name = "#{param}".chomp.strip
          value = value.chomp.strip
          new_value = ''
          if (value)
            if value =~ /^['"](.*)['"]$/
              new_value = $1
            else
              new_value = value
            end
          else
            new_value = ''
          end 

          if group
            self.add_to_group(group, var_name, new_value)
          else
            self.add(var_name, new_value)
          end
          
        elsif(/^\[(.+)\]$/.match(line).to_a != [])
          group = /^\[(.+)\]$/.match(line).to_a[1]
          self.add(group, {})
          self.groups.push(group)
        end
      end
    end   
    self.params
  end

  # This method adds an element to the config object (not the config file)
  # By adding a Hash, you create a new group
  def add(param_name, value)
    self.params["#{param_name}"] = value
  end

  # Add parameters to a group. Note that parameters with the same name
  # could be placed in different groups
  def add_to_group(group, param_name, value)
    self.params["#{group}"]["#{param_name}"] = value
  end

end
